{"version":3,"sources":["client/authForm/AuthForm.module.scss","client/authForm/AuthForm.js","pages/authPage/AuthPage.js"],"names":["module","exports","initialForm","email","password","validationSchema","Yup","shape","min","required","max","FormControl","label","props","id","useMemo","Math","floor","random","toString","useField","field","meta","className","css","form_control_container","htmlFor","error","touched","input_error","input","box_error_message","error_message_text","AuthForm","useState","action","setAction","dispatch","useDispatch","form_container","initialValues","onSubmit","values","register","login","form","autoComplete","form_google_paragraph_container","form_google_paragraph","clientId","buttonText","onSuccess","response","axios","method","url","data","tokenId","then","loginSuccess","user","onFailure","console","log","cookiePolicy","googleButton","form_paragraph_container","form_paragraph","form_input_area","name","type","form_buttons","form_button","onClick","AuthPage"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,aAAe,+BAA+B,OAAS,yBAAyB,gCAAkC,kDAAkD,sBAAwB,wCAAwC,yBAA2B,2CAA2C,eAAiB,iCAAiC,gBAAkB,kCAAkC,MAAQ,wBAAwB,MAAQ,wBAAwB,YAAc,8BAA8B,kBAAoB,oCAAoC,mBAAqB,qCAAqC,aAAe,+BAA+B,YAAc,8BAA8B,iBAAmB,qC,4LCYzxBC,EAAc,CAAEC,MAAO,GAAIC,SAAU,IAErCC,EAAmBC,MAAaC,MAAM,CAC1CJ,MAAOG,MACJH,MADI,4HAEJK,IAAI,EAAG,mGACPC,SAAS,yHACZL,SAAUE,MACPG,SAAS,yHACTD,IAAI,EAAG,mGACPE,IAAI,GAAI,4GAGAC,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,iBAC5CC,EAAKC,mBAAQ,kBAAMC,KAAKC,MAAsB,MAAhBD,KAAKE,UAAkBC,aAAY,IACvE,EAAsBC,YAASP,GAA/B,mBAAOQ,EAAP,KAAcC,EAAd,KAEA,OACE,qBAAKC,UAAWC,IAAIC,uBAApB,SACE,wBAAOF,UAAWC,IAAIZ,MAAOc,QAASZ,EAAtC,UACGF,EACD,+CACEE,GAAIA,EACJS,UACED,EAAKK,OAASL,EAAKM,QAAnB,UAAgCJ,IAAIK,aAApC,UAAuDL,IAAIM,QAEzDT,GACAR,IAEN,qBAAKU,UAAWC,IAAIO,kBAApB,SACGT,EAAKK,OAASL,EAAKM,SAClB,mBAAGL,UAAWC,IAAIQ,mBAAlB,SAAuCV,EAAKK,gBAQzC,SAASM,IACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAWC,cAsBjB,OACE,qBAAKf,UAAWC,IAAIe,eAApB,SACE,cAAC,IAAD,CACEC,cAAetC,EACfG,iBAAkBA,EAClBoC,SAzBe,SAACC,GACL,aAAXP,EACFE,EAASM,YAASD,IACE,UAAXP,GACTE,EAASO,YAAMF,KAkBf,SAKE,eAAC,IAAD,CAAMnB,UAAWC,IAAIqB,KAAMC,aAAa,MAAxC,UACE,qBAAKvB,UAAWC,IAAIuB,gCAApB,SACE,oBAAGxB,UAAWC,IAAIwB,sBAAlB,kNACuC,uBADvC,uBAKF,cAAC,IAAD,CACEC,SAAS,0EACTC,WAAW,SACXC,UA9BoB,SAACC,GAC7BC,IAAM,CACJC,OAAQ,OACRC,IAAK,sEACLC,KAAM,CAAEC,QAASL,EAASK,WACzBC,MAAK,SAACN,GACPf,EAASsB,YAAaP,EAASI,KAAKI,WAyB9BC,UAtBkB,SAACT,GAC3BU,QAAQC,IAAIX,IAsBJY,aAAc,qBACdzC,UAAWC,IAAIyC,eAEjB,qBAAK1C,UAAWC,IAAI0C,yBAApB,SACE,oBAAG3C,UAAWC,IAAI2C,eAAlB,qKACuC,uBADvC,gNAKF,sBAAK5C,UAAWC,IAAI4C,gBAApB,UACE,cAAC,EAAD,CAAaxD,MAAM,qGAAqByD,KAAK,QAAQC,KAAK,UAC1D,cAAC,EAAD,CAAa1D,MAAM,wCAAU0D,KAAK,WAAWD,KAAK,aAClD,sBAAK9C,UAAWC,IAAI+C,aAApB,UACE,wBACED,KAAK,SACL/C,UAAWC,IAAIgD,YACfC,QAAS,kBAAMrC,EAAU,UAH3B,4CAQA,wBACEkC,KAAK,SACL/C,UAAWC,IAAIgD,YACfC,QAAS,kBAAMrC,EAAU,aAH3B,6FCxGCsC,UAVE,WACf,OACE,8BACE,8BACE,cAACzC,EAAD","file":"static/js/12.9304ad8f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_container\":\"AuthForm_form_container__2A95V\",\"googleButton\":\"AuthForm_googleButton__grAtI\",\"button\":\"AuthForm_button__3jf-3\",\"form_google_paragraph_container\":\"AuthForm_form_google_paragraph_container__e4sJY\",\"form_google_paragraph\":\"AuthForm_form_google_paragraph__1mP_j\",\"form_paragraph_container\":\"AuthForm_form_paragraph_container__1n4eg\",\"form_paragraph\":\"AuthForm_form_paragraph__5DVTf\",\"form_input_area\":\"AuthForm_form_input_area__2HE3V\",\"label\":\"AuthForm_label__uK9hY\",\"input\":\"AuthForm_input__2fvFP\",\"input_error\":\"AuthForm_input_error__TsrM2\",\"box_error_message\":\"AuthForm_box_error_message__2tYdH\",\"error_message_text\":\"AuthForm_error_message_text__3cqGw\",\"form_buttons\":\"AuthForm_form_buttons__3XvTm\",\"form_button\":\"AuthForm_form_button___zyQ5\",\"button_container\":\"AuthForm_button_container__1KEWh\"};","import React, { useMemo, useState } from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { login, register } from \"../../redux/auth/auth.operations\";\r\n\r\n///////////////////////////////Formik, YUP /////////////////////////////////////////////////\r\nimport { Form, Formik, useField } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport css from \"./AuthForm.module.scss\";\r\nimport GoogleLogin from \"react-google-login\";\r\nimport axios from \"axios\";\r\nimport { loginSuccess } from \"../../redux/auth/auth.actions\";\r\n\r\nconst initialForm = { email: \"\", password: \"\" };\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email(`* E-mail адрес введен неверно!`)\r\n    .min(5, \"* Минимум 5 символов\")\r\n    .required(\"*это обязательное поле\"),\r\n  password: Yup.string()\r\n    .required(\"*это обязательное поле\")\r\n    .min(5, \"* Минимум 6 символов\")\r\n    .max(20, \"* Максимум 20 символов\"),\r\n});\r\n\r\nexport const FormControl = ({ label, ...props }) => {\r\n  const id = useMemo(() => Math.floor(Math.random() * 99999).toString(), []);\r\n  const [field, meta] = useField(props);\r\n\r\n  return (\r\n    <div className={css.form_control_container}>\r\n      <label className={css.label} htmlFor={id}>\r\n        {label}\r\n        <input\r\n          id={id}\r\n          className={\r\n            meta.error && meta.touched ? `${css.input_error}` : `${css.input}`\r\n          }\r\n          {...field}\r\n          {...props}\r\n        />\r\n        <div className={css.box_error_message}>\r\n          {meta.error && meta.touched && (\r\n            <p className={css.error_message_text}>{meta.error}</p>\r\n          )}\r\n        </div>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function AuthForm() {\r\n  const [action, setAction] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (values) => {\r\n    if (action === \"register\") {\r\n      dispatch(register(values));\r\n    } else if (action === \"login\") {\r\n      dispatch(login(values));\r\n    }\r\n  };\r\n  const responseSuccessGoogle = (response) => {\r\n    axios({\r\n      method: \"POST\",\r\n      url: \"https://kapusta-smart-finance.herokuapp.com/api/v1/auth/googlelogin\",\r\n      data: { tokenId: response.tokenId },\r\n    }).then((response) => {\r\n      dispatch(loginSuccess(response.data.user));\r\n    });\r\n  };\r\n  const responseErrorGoogle = (response) => {\r\n    console.log(response);\r\n  };\r\n\r\n  return (\r\n    <div className={css.form_container}>\r\n      <Formik\r\n        initialValues={initialForm}\r\n        validationSchema={validationSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Form className={css.form} autoComplete=\"off\">\r\n          <div className={css.form_google_paragraph_container}>\r\n            <p className={css.form_google_paragraph}>\r\n              Вы можете авторизироваться с помощью <br />\r\n              Google Account:\r\n            </p>\r\n          </div>\r\n          <GoogleLogin\r\n            clientId=\"98081212290-o5ci4422o4omppgvkqc2q6e9jd13ioso.apps.googleusercontent.com\"\r\n            buttonText=\"Google\"\r\n            onSuccess={responseSuccessGoogle}\r\n            onFailure={responseErrorGoogle}\r\n            cookiePolicy={\"single_host_origin\"}\r\n            className={css.googleButton}\r\n          />\r\n          <div className={css.form_paragraph_container}>\r\n            <p className={css.form_paragraph}>\r\n              Или зайти с помощью e-mail и пароля, <br />\r\n              предварительно зарегистрировавшись:\r\n            </p>\r\n          </div>\r\n          <div className={css.form_input_area}>\r\n            <FormControl label=\"Электронная почта*\" name=\"email\" type=\"email\" />\r\n            <FormControl label=\"Пароль*\" type=\"password\" name=\"password\" />\r\n            <div className={css.form_buttons}>\r\n              <button\r\n                type=\"submit\"\r\n                className={css.form_button}\r\n                onClick={() => setAction(\"login\")}\r\n              >\r\n                Войти\r\n              </button>\r\n\r\n              <button\r\n                type=\"submit\"\r\n                className={css.form_button}\r\n                onClick={() => setAction(\"register\")}\r\n              >\r\n                Регистрация\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport AuthForm from \"../../client/authForm/AuthForm\";\r\n\r\nconst AuthPage = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <AuthForm />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthPage;\r\n"],"sourceRoot":""}